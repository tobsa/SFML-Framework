////////////////////////////////////////////////////////////////////////////////
// Filename: Shape.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SHAPE_HPP
#define SHAPE_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics/Drawable.hpp>
#include "../Containers/Vector.hpp"

namespace sfx
{

class Shape : public sf::Drawable
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Destroy the shape
    //////////////////////////////////////////////////////////////////////////////// 
    virtual ~Shape();

    ////////////////////////////////////////////////////////////////////////////////
    // Draw the shape
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Check if a single point is inside the shape
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool contains(const sf::Vector2f& position) const = 0;
    virtual bool contains(float x, float y) const = 0;

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Protected typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef sfx::Vector<sf::Vertex> Vertices;

    ////////////////////////////////////////////////////////////////////////////////
    // Protected member data
    ////////////////////////////////////////////////////////////////////////////////
    Vertices m_vertices;
};

} // namespace sfx

#endif