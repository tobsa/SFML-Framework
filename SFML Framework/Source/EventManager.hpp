////////////////////////////////////////////////////////////////////////////////
// Filename: EventManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_EVENT_MANAGER_HPP
#define SFX_EVENT_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Event.hpp"
#include "Containers/Vector.hpp"

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// An event manager. Can add, remove and accessing events
////////////////////////////////////////////////////////////////////////////////
class EventManager
{
protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef Vector<Event> Events;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Add an event to the manager
    ////////////////////////////////////////////////////////////////////////////////
    void addEvent(const Event& event);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the amount of events in the manager
    ////////////////////////////////////////////////////////////////////////////////
    std::size_t getEventsAmount() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get an event. If the event doesn't exist an error is thrown
    ////////////////////////////////////////////////////////////////////////////////
    const Event& getEvent(const std::string& name);
    const Event& getEvent(std::size_t index);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the whole events vector
    ////////////////////////////////////////////////////////////////////////////////
    Events& getEvents();

    ////////////////////////////////////////////////////////////////////////////////
    // Remove an event from the manager
    ////////////////////////////////////////////////////////////////////////////////
    void removeEvent(const std::string& name);
    void removeEvent(std::size_t index);
    void removeLastEvent();

    ////////////////////////////////////////////////////////////////////////////////
    // Check if an event exist
    ////////////////////////////////////////////////////////////////////////////////
    bool findEvent(const std::string& name);

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    Events m_events;
};

} // namespace sfx

#endif
