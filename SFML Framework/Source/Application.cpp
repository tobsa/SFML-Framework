////////////////////////////////////////////////////////////////////////////////
// Filename: Application.cpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Application.hpp"
#include <SFML/Graphics/RenderWindow.hpp>
#include <SFML/Graphics/Sprite.hpp>
#include <SFML/Window/Mouse.hpp>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
Application::Application(sf::VideoMode videoMode, const std::string& name, sf::Uint32 style) :
    m_renderWindow (videoMode, name, style),
    m_audioManager (*this)
{
}

////////////////////////////////////////////////////////////////////////////////
Application::Application(unsigned int width, unsigned int height, const std::string& name, sf::Uint32 style) :
    m_renderWindow (sf::VideoMode(width, height), name, style),
    m_audioManager (*this)
{
}

////////////////////////////////////////////////////////////////////////////////
sf::Image Application::capture() const
{
    return m_renderWindow.capture();
}

////////////////////////////////////////////////////////////////////////////////
sf::Vector2f Application::getSize() const
{
    return static_cast<sf::Vector2f>(m_renderWindow.getSize());
}

////////////////////////////////////////////////////////////////////////////////
sf::Vector2f Application::getPosition() const
{
    return static_cast<sf::Vector2f>(m_renderWindow.getPosition());
}

////////////////////////////////////////////////////////////////////////////////
sf::Vector2f Application::getMousePosition() const
{
    return static_cast<sf::Vector2f>(sf::Mouse::getPosition(m_renderWindow));
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isOpen() const
{
    return m_renderWindow.isOpen();
}

////////////////////////////////////////////////////////////////////////////////
bool Application::pollEvent(sf::Event& event)
{
    return m_renderWindow.pollEvent(event);
}

////////////////////////////////////////////////////////////////////////////////
void Application::create(sf::VideoMode videoMode, const std::string& name, sf::Uint32 style)
{
    m_renderWindow.create(videoMode, name, style);
}

////////////////////////////////////////////////////////////////////////////////
void Application::create(unsigned int width, unsigned int height, const std::string& name, sf::Uint32 style)
{
    m_renderWindow.create(sf::VideoMode(width, height), name, style);
}

////////////////////////////////////////////////////////////////////////////////
void Application::close()
{
    m_renderWindow.close();
}

////////////////////////////////////////////////////////////////////////////////
void Application::setPosition(const sf::Vector2f& position)
{
    m_renderWindow.setPosition(static_cast<sf::Vector2i>(position));
}

////////////////////////////////////////////////////////////////////////////////
void Application::setPosition(float x, float y)
{
    setPosition(sf::Vector2f(x, y));
}

////////////////////////////////////////////////////////////////////////////////
void Application::setTitle(const std::string& title)
{
    m_renderWindow.setTitle(title);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setVisible(bool visible)
{
    m_renderWindow.setVisible(visible);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setVerticalSyncEnabled(bool enabled)
{
    m_renderWindow.setVerticalSyncEnabled(enabled);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMouseCursorVisible(bool visible)
{
    m_renderWindow.setMouseCursorVisible(visible);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setKeyRepeatEnabled(bool enabled)
{
    m_renderWindow.setKeyRepeatEnabled(enabled);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setFramerateLimit(unsigned int limit)
{
    m_renderWindow.setFramerateLimit(limit);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setActive(bool active)
{
    m_renderWindow.setActive(active);
}


////////////////////////////////////////////////////////////////////////////////
void Application::display()
{
    m_renderWindow.display();
}

////////////////////////////////////////////////////////////////////////////////
void Application::clear(const sf::Color& color)
{
    m_renderWindow.clear();
}



////////////////////////////////////////////////////////////////////////////////
void Application::draw(const sf::Drawable& drawable, const sf::RenderStates& states)
{
    m_renderWindow.draw(drawable, states);
}

////////////////////////////////////////////////////////////////////////////////
void Application::draw(const sf::Vertex *vertices, unsigned int vertexCount, sf::PrimitiveType type, const sf::RenderStates& states)
{
    m_renderWindow.draw(vertices, vertexCount, type, states);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMousePosition(const sf::Vector2f& position)
{
    sf::Mouse::setPosition(static_cast<sf::Vector2i>(position), m_renderWindow);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMousePosition(float x, float y)
{
    setMousePosition(sf::Vector2f(x, y));
}

////////////////////////////////////////////////////////////////////////////////
sf::Texture& Application::getTexture(const std::string& filename)
{
    return m_resourceManager.getTexture(filename);
}

////////////////////////////////////////////////////////////////////////////////
sf::Font& Application::getFont(const std::string& filename)
{
    return m_resourceManager.getFont(filename);
}

////////////////////////////////////////////////////////////////////////////////
sf::SoundBuffer& Application::getSoundBuffer(const std::string& filename)
{
    return m_resourceManager.getSoundBuffer(filename);
}

////////////////////////////////////////////////////////////////////////////////
std::string Application::getValueType(const std::string& key)
{
    return m_gameSettings.getType(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::removeValue(const std::string& key)
{
    m_gameSettings.remove(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::addState(const std::string& key, StatePtr state)
{
    m_stateManager.add(key, state);
}

////////////////////////////////////////////////////////////////////////////////
Application::StatePtr Application::getState() const
{
    return m_stateManager.getState();
}

////////////////////////////////////////////////////////////////////////////////
Application::StatePtr Application::getState(const std::string& key)
{
    return m_stateManager.getState(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setState(const std::string& key)
{
    return m_stateManager.setState(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::addEvent(const Event& event)
{
    m_eventManager.addEvent(event);
}

////////////////////////////////////////////////////////////////////////////////
std::size_t Application::getEventSize() const
{
    return m_eventManager.getSize();
}

////////////////////////////////////////////////////////////////////////////////
const Event& Application::getEvent(const std::string& name)
{
    return m_eventManager.getEvent(name);
}

////////////////////////////////////////////////////////////////////////////////
const Event& Application::getEvent(std::size_t index)
{
    return m_eventManager.getEvent(index);
}

////////////////////////////////////////////////////////////////////////////////
sfx::Vector<Event>& Application::getEvents()
{
    return m_eventManager.getEvents();
}

////////////////////////////////////////////////////////////////////////////////
void Application::removeEvent(const std::string& name)
{
    m_eventManager.remove(name);
}

////////////////////////////////////////////////////////////////////////////////
void Application::removeEvent(std::size_t index)
{
    m_eventManager.remove(index);
}

////////////////////////////////////////////////////////////////////////////////
void Application::removeLastEvent()
{
    m_eventManager.removeLast();
}

////////////////////////////////////////////////////////////////////////////////
bool Application::findEvent(const std::string& name)
{
    return m_eventManager.findEvent(name);
}

////////////////////////////////////////////////////////////////////////////////
void Application::addSound(const std::string& key, const std::string& filename, std::size_t nbChannels)
{
    m_audioManager.addSound(key, filename, nbChannels);
}

////////////////////////////////////////////////////////////////////////////////
void Application::playSound(const std::string& key)
{
    m_audioManager.playSound(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::pauseSound(const std::string& key)
{
    m_audioManager.pauseSound(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::stopSound(const std::string& key)
{
    m_audioManager.stopSound(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setSoundVolume(const std::string& key, float volume)
{
    m_audioManager.setSoundVolume(key, volume);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setSoundLoop(const std::string& key, bool loop)
{
    m_audioManager.setSoundLoop(key, loop);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setSoundPitch(const std::string& key, float pitch)
{
    m_audioManager.setSoundPitch(key, pitch);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isSoundPlaying(const std::string& key) const
{
    return m_audioManager.isSoundPlaying(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isSoundPaused(const std::string& key) const
{
    return m_audioManager.isSoundPaused(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isSoundStopped(const std::string& key) const
{
    return m_audioManager.isSoundStopped(key);
}

////////////////////////////////////////////////////////////////////////////////
float Application::getSoundVolume(const std::string& key) const
{
    return m_audioManager.getSoundVolume(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::getSoundLoop(const std::string& key) const
{
    return m_audioManager.getSoundLoop(key);
}

////////////////////////////////////////////////////////////////////////////////
float Application::getSoundPitch(const std::string& key) const
{
    return m_audioManager.getSoundPitch(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::addMusic(const std::string& key, const std::string& filename)
{
    m_audioManager.addMusic(key, filename);
}

////////////////////////////////////////////////////////////////////////////////
void Application::playMusic(const std::string& key)
{
    m_audioManager.playMusic(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::pauseMusic(const std::string& key)
{
    m_audioManager.pauseMusic(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::stopMusic(const std::string& key)
{
    m_audioManager.stopMusic(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMusicVolume(const std::string& key, float volume)
{
    m_audioManager.setMusicVolume(key, volume);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMusicLoop(const std::string& key, bool loop)
{
    m_audioManager.setMusicLoop(key, loop);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMusicPitch(const std::string& key, float pitch)
{
    m_audioManager.setMusicPitch(key, pitch);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isMusicPlaying(const std::string& key) const
{
    return m_audioManager.isMusicPlaying(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isMusicPaused(const std::string& key) const
{
    return m_audioManager.isMusicPaused(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::isMusicStopped(const std::string& key) const
{
    return m_audioManager.isMusicStopped(key);
}

////////////////////////////////////////////////////////////////////////////////
float Application::getMusicVolume(const std::string& key) const
{
    return m_audioManager.getMusicVolume(key);
}

////////////////////////////////////////////////////////////////////////////////
bool Application::getMusicLoop(const std::string& key) const
{
    return m_audioManager.getMusicLoop(key);
}

////////////////////////////////////////////////////////////////////////////////
float Application::getMusicPitch(const std::string& key) const
{
    return m_audioManager.getMusicPitch(key);
}

////////////////////////////////////////////////////////////////////////////////
void Application::addSoundToList(const std::string& soundList, const std::string& filename)
{
    m_audioManager.addSoundToList(soundList, filename);
}

////////////////////////////////////////////////////////////////////////////////
void Application::playSoundList(const std::string& soundList)
{
    m_audioManager.playSoundList(soundList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::pauseSoundList(const std::string& soundList)
{
    m_audioManager.pauseSoundList(soundList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::stopSoundList(const std::string& soundList)
{
    m_audioManager.stopSoundList(soundList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setSoundListOrder(const std::string& soundList, SoundList::Order order)
{
    m_audioManager.setSoundListOrder(soundList, order);
}

////////////////////////////////////////////////////////////////////////////////
void Application::onUpdateAudio()
{
    m_audioManager.onUpdate();
}

////////////////////////////////////////////////////////////////////////////////
void Application::addMusicToList(const std::string& musicList, const std::string& filename)
{
    m_audioManager.addMusicToList(musicList, filename);
}

////////////////////////////////////////////////////////////////////////////////
void Application::playMusicList(const std::string& musicList)
{
    m_audioManager.playMusicList(musicList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::pauseMusicList(const std::string& musicList)
{
    m_audioManager.pauseMusicList(musicList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::stopMusicList(const std::string& musicList)
{
    m_audioManager.stopMusicList(musicList);
}

////////////////////////////////////////////////////////////////////////////////
void Application::setMusicListOrder(const std::string& musicList, MusicList::Order order)
{
    m_audioManager.setMusicListOrder(musicList, order);
}

} // namespace sfx