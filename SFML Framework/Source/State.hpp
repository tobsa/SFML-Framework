////////////////////////////////////////////////////////////////////////////////
// Filename: State.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_STATE_HPP
#define SFX_STATE_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include <string>


class Kingdom;

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
class Application;

////////////////////////////////////////////////////////////////////////////////
// A base state class. All game states should inherit from this.
////////////////////////////////////////////////////////////////////////////////
class State
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create a base state
    ////////////////////////////////////////////////////////////////////////////////
    State(const std::string& name);

    ////////////////////////////////////////////////////////////////////////////////
    // Destroy the state
    ////////////////////////////////////////////////////////////////////////////////
    virtual ~State();

    ////////////////////////////////////////////////////////////////////////////////
    // Execute the state
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool onExecute() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the name of the state
    ////////////////////////////////////////////////////////////////////////////////
    const std::string& getName() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Process events
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onEvent() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Update the state
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onUpdate() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Render state content
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onRender() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // When the state is paused
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onPause() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // When the state is resumed
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onResume() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Restart the state
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onRestart() = 0;

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Protected member data
    ////////////////////////////////////////////////////////////////////////////////
    std::string  m_name;
};

}

#endif
