////////////////////////////////////////////////////////////////////////////////
// Filename: BaseEntityManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_BASE_ENTITY_MANAGER_HPP
#define SFX_BASE_ENTITY_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Entity.hpp"

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A base entity manager
////////////////////////////////////////////////////////////////////////////////
class BaseEntityManager : public sf::Drawable
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef std::shared_ptr<Entity> EntityPtr;
    typedef sfx::Vector<EntityPtr>  EntityVector;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ////////////////////////////////////////////////////////////////////////////////
    BaseEntityManager(Application& application);

    ////////////////////////////////////////////////////////////////////////////////
    // Destructor
    ////////////////////////////////////////////////////////////////////////////////
    virtual ~BaseEntityManager() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Update all entities in the manager
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onUpdate(float dt);

    ////////////////////////////////////////////////////////////////////////////////
    // Draw all entities in the manager
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Protected member data
    ////////////////////////////////////////////////////////////////////////////////
    Application& m_application;
    EntityVector m_entities;

};

} // namespace sfx

#endif