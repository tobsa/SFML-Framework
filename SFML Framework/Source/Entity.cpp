////////////////////////////////////////////////////////////////////////////////
// Filename: Entity.cpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Application.hpp"
#include "Entity.hpp"
#include <SFML/Graphics/RenderTarget.hpp>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
Entity::Entity(sfx::Application& application) :
    m_application (application),
    m_isEnabled   (true)
{
}

////////////////////////////////////////////////////////////////////////////////
Entity::Entity(sfx::Application& application, const std::string& filename, const sf::Vector2f& position) :
    m_application (application),
    m_isEnabled   (true)
{
    m_sprite.setTexture(application.getTexture(filename));
    m_sprite.setPosition(position);
}

////////////////////////////////////////////////////////////////////////////////
Entity::Entity(sfx::Application& application, const std::string& filename, float x, float y) :
    m_application (application),
    m_isEnabled   (true)
{
    m_sprite.setTexture(application.getTexture(filename));
    m_sprite.setPosition(x, y);
}

////////////////////////////////////////////////////////////////////////////////
Entity::Entity(sfx::Application& application, const sf::Texture& texture, const sf::Vector2f& position) :
    m_application (application),
    m_isEnabled   (true)
{
    m_sprite.setTexture(texture);
    m_sprite.setPosition(position);
}

////////////////////////////////////////////////////////////////////////////////
Entity::Entity(sfx::Application& application, const sf::Texture& texture, float x, float y) :
    m_application (application),
    m_isEnabled   (true)
{
    m_sprite.setTexture(texture);
    m_sprite.setPosition(x, y);
}

////////////////////////////////////////////////////////////////////////////////
Entity::~Entity()
{
}
    
////////////////////////////////////////////////////////////////////////////////
void Entity::onUpdate(float dt)
{
    for(const auto& component : m_components)
        component->onUpdate(dt);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::draw(sf::RenderTarget& renderTarget, sf::RenderStates states) const
{
    if(isDisabled()) return;

    renderTarget.draw(m_sprite, states);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::addComponent(ComponentPtr component)
{
    m_components.addBack(component);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::removeComponent(ComponentPtr component)
{
    m_components.removeValue(component);
}

////////////////////////////////////////////////////////////////////////////////
const sf::Vector2f& Entity::getPosition() const
{
    return m_sprite.getPosition();
}

////////////////////////////////////////////////////////////////////////////////
sf::Vector2f Entity::getSize() const
{
    return sf::Vector2f(m_sprite.getLocalBounds().width, m_sprite.getLocalBounds().height);
}

////////////////////////////////////////////////////////////////////////////////
sf::Vector2f Entity::getCenter() const
{
    return sf::Vector2f(getPosition().x + getSize().x / 2.f, getPosition().y + getSize().y / 2.f);
}

////////////////////////////////////////////////////////////////////////////////
sf::FloatRect Entity::getBoundingBox() const
{
    return sf::FloatRect(getPosition().x - getOrigin().x, getPosition().y - getOrigin().y, getSize().x, getSize().y);
}

////////////////////////////////////////////////////////////////////////////////
const sf::Vector2f& Entity::getOrigin() const
{
    return m_sprite.getOrigin();
}

////////////////////////////////////////////////////////////////////////////////
const sf::Vector2f& Entity::getScale() const
{
    return m_sprite.getScale();
}

////////////////////////////////////////////////////////////////////////////////
float Entity::getRotation() const
{
    return m_sprite.getRotation();
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setPosition(const sf::Vector2f& position)
{
    setPosition(position.x, position.y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setPosition(float x, float y)
{
    m_sprite.setPosition(x, y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setX(float x)
{
    setPosition(x, getPosition().y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setY(float y)
{
    setPosition(getPosition().x, y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setOrigin(const sf::Vector2f& origin)
{
    m_sprite.setOrigin(origin);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setOrigin(float originX, float originY)
{
    m_sprite.setOrigin(originX, originY);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setOriginTop()
{
    m_sprite.setOrigin(0.f, 0.f);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setOriginCenter()
{
    m_sprite.setOrigin(getSize().x / 2.f, getSize().y / 2.f);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setScale(const sf::Vector2f& scale)
{
    m_sprite.setScale(scale);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setScale(float x, float y)
{
    m_sprite.setScale(x, y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::scale(const sf::Vector2f& scale)
{
    m_sprite.scale(scale);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::scale(float x, float y)
{
    m_sprite.scale(x, y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setRotation(float rotation)
{
    m_sprite.setRotation(rotation);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::rotate(float angle)
{
    m_sprite.rotate(angle);
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::intersects(const Entity& entity) const
{
    return intersects(entity.getBoundingBox());
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::intersects(const sf::FloatRect& boundingBox) const
{
    return boundingBox.intersects(getBoundingBox());
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::contains(const sf::Vector2f& position) const
{
    return contains(position.x, position.y);
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::contains(float x, float y) const
{
    return getBoundingBox().contains(x, y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::move(const sf::Vector2f& offset)
{
    m_sprite.move(offset);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::move(float offsetX, float offsetY)
{
    m_sprite.move(offsetX, offsetY);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setTexture(const sf::Texture& texture)
{
    m_sprite.setTexture(texture, true);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setTexture(const std::string& filename)
{
    m_sprite.setTexture(m_application.getTexture(filename), true);
}

////////////////////////////////////////////////////////////////////////////////
const sf::Texture& Entity::getTexture() const
{
    return *m_sprite.getTexture();
}

////////////////////////////////////////////////////////////////////////////////
void Entity::enable()
{
    m_isEnabled = true;
}

////////////////////////////////////////////////////////////////////////////////
void Entity::disable()
{
    m_isEnabled = false;
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::isEnabled() const
{
    return m_isEnabled;
}

////////////////////////////////////////////////////////////////////////////////
bool Entity::isDisabled() const
{
    return !m_isEnabled;
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setSize(const sf::Vector2f& size)
{
    setSize(size.x, size.y);
}

////////////////////////////////////////////////////////////////////////////////
void Entity::setSize(float w, float h)
{
    m_sprite.setScale(w / getSize().x, h / getSize().y);
}

} // namespace sfx