////////////////////////////////////////////////////////////////////////////////
// Filename: Entity.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef ENTITY_HPP
#define ENTITY_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include <SFML/Graphics/Sprite.hpp>
#include <string>

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace sf  { class Event;       }
namespace sfx { class Application; }

namespace sfx
{

class Entity : public sf::Drawable
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create an entity
    ////////////////////////////////////////////////////////////////////////////////
    Entity(Application& application);
    Entity(Application& application, const std::string& filename, const sf::Vector2f& position = sf::Vector2f(0.f, 0.f));
    Entity(Application& application, const std::string& filename, float x, float y);
    Entity(Application& application, const sf::Texture& texture, const sf::Vector2f& position = sf::Vector2f(0, 0));
    Entity(Application& application, const sf::Texture& texture, float x, float y);

    ////////////////////////////////////////////////////////////////////////////////
    // Destroy the entity
    ////////////////////////////////////////////////////////////////////////////////
    virtual ~Entity();

    ////////////////////////////////////////////////////////////////////////////////
    // Process events
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onEvent(const sf::Event& event);

    ////////////////////////////////////////////////////////////////////////////////
    // Update the entity
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onUpdate(float dt);

    ////////////////////////////////////////////////////////////////////////////////
    // Draw the entity
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the position, size, center and bounding box
    ////////////////////////////////////////////////////////////////////////////////
    virtual const sf::Vector2f& getPosition() const;
    virtual sf::Vector2f getSize() const;
    virtual sf::Vector2f getCenter() const;
    virtual sf::FloatRect getBoundingBox() const;
    
    ////////////////////////////////////////////////////////////////////////////////
    // Get origin, scale and rotation
    ////////////////////////////////////////////////////////////////////////////////
    virtual const sf::Vector2f& getOrigin() const;
    virtual const sf::Vector2f& getScale() const;
    virtual float getRotation() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set new position
    ////////////////////////////////////////////////////////////////////////////////
    virtual void setPosition(const sf::Vector2f& position);
    virtual void setPosition(float x, float y);
    virtual void setX(float x);
    virtual void setY(float y);

    ////////////////////////////////////////////////////////////////////////////////
    // Set origin, scale and rotation
    ////////////////////////////////////////////////////////////////////////////////
    void setOrigin(const sf::Vector2f& origin);
    void setOrigin(float originX, float originY);
    void setOriginTop();    
    void setOriginCenter(); 
    void setScale(const sf::Vector2f& scale);
    void setScale(float x, float y);
    void scale(const sf::Vector2f& scale);
    void scale(float x, float y);
    void setRotation(float rotation);
    void rotate(float angle);

    ////////////////////////////////////////////////////////////////////////////////
    // Check intersections or a point is inside the entity
    ////////////////////////////////////////////////////////////////////////////////
    bool intersects(const Entity& entity) const;
    bool intersects(const sf::FloatRect& boundingBox) const;
    bool contains(const sf::Vector2f& position) const;
    bool contains(float x, float y) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Move the entity
    ////////////////////////////////////////////////////////////////////////////////
    virtual void move(const sf::Vector2f& offset);
    virtual void move(float offsetX, float offsetY);

    ////////////////////////////////////////////////////////////////////////////////
    // Set new texture
    ////////////////////////////////////////////////////////////////////////////////
    void setTexture(const sf::Texture& texture);
    void setTexture(const std::string& filename);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the current texture
    ////////////////////////////////////////////////////////////////////////////////
    const sf::Texture& getTexture() const;

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Protected member data
    ////////////////////////////////////////////////////////////////////////////////
    Application& m_application;
    sf::Sprite   m_sprite;
};

} // namespace sfx

#endif