////////////////////////////////////////////////////////////////////////////////
// Filename: Entity.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef ENTITY_HPP
#define ENTITY_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Containers/Vector.hpp"
#include "Component.hpp"
#include <SFML/Graphics/Sprite.hpp>
#include <memory>

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace sfx { class Application; }

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A basic entity object
////////////////////////////////////////////////////////////////////////////////
class Entity : public sf::Drawable
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef std::shared_ptr<Component> ComponentPtr;
    typedef sfx::Vector<ComponentPtr>  ComponentVector;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Constructors
    ////////////////////////////////////////////////////////////////////////////////
    Entity(sfx::Application& application);
    Entity(sfx::Application& application, const std::string& filename, const sf::Vector2f& position = sf::Vector2f(0.f, 0.f));
    Entity(sfx::Application& application, const std::string& filename, float x, float y);
    Entity(sfx::Application& application, const sf::Texture& texture, const sf::Vector2f& position = sf::Vector2f(0, 0));
    Entity(sfx::Application& application, const sf::Texture& texture, float x, float y);

    ////////////////////////////////////////////////////////////////////////////////
    // Destructor
    ////////////////////////////////////////////////////////////////////////////////
    virtual ~Entity();
    
    ////////////////////////////////////////////////////////////////////////////////
    // Handle updates
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onUpdate(float dt);

    ////////////////////////////////////////////////////////////////////////////////
    // Draw the object
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& renderTarget, sf::RenderStates states) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Add remove components
    ////////////////////////////////////////////////////////////////////////////////
    void addComponent(ComponentPtr component);
    void removeComponent(ComponentPtr component);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the position, size, center and bounding box
    ////////////////////////////////////////////////////////////////////////////////
    const sf::Vector2f& getPosition() const;
    sf::Vector2f getSize() const;
    sf::Vector2f getCenter() const;
    sf::FloatRect getBoundingBox() const;
    
    ////////////////////////////////////////////////////////////////////////////////
    // Get origin, scale and rotation
    ////////////////////////////////////////////////////////////////////////////////
    const sf::Vector2f& getOrigin() const;
    const sf::Vector2f& getScale() const;
    float getRotation() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set new position
    ////////////////////////////////////////////////////////////////////////////////
    void setPosition(const sf::Vector2f& position);
    void setPosition(float x, float y);
    void setX(float x);
    void setY(float y);

    ////////////////////////////////////////////////////////////////////////////////
    // Set origin, scale and rotation
    ////////////////////////////////////////////////////////////////////////////////
    void setOrigin(const sf::Vector2f& origin);
    void setOrigin(float originX, float originY);
    void setOriginTop();    
    void setOriginCenter(); 
    void setScale(const sf::Vector2f& scale);
    void setScale(float x, float y);
    void scale(const sf::Vector2f& scale);
    void scale(float x, float y);
    void setRotation(float rotation);
    void rotate(float angle);

    ////////////////////////////////////////////////////////////////////////////////
    // Check intersections or a point is inside the entity
    ////////////////////////////////////////////////////////////////////////////////
    bool intersects(const Entity& entity) const;
    bool intersects(const sf::FloatRect& boundingBox) const;
    bool contains(const sf::Vector2f& position) const;
    bool contains(float x, float y) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Move the entity
    ////////////////////////////////////////////////////////////////////////////////
    void move(const sf::Vector2f& offset);
    void move(float offsetX, float offsetY);

    ////////////////////////////////////////////////////////////////////////////////
    // Set new texture
    ////////////////////////////////////////////////////////////////////////////////
    void setTexture(const sf::Texture& texture);
    void setTexture(const std::string& filename);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the current texture
    ////////////////////////////////////////////////////////////////////////////////
    const sf::Texture& getTexture() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Enable/disable the entity (no updates and no rendering)
    ////////////////////////////////////////////////////////////////////////////////
    void enable();
    void disable();

    ////////////////////////////////////////////////////////////////////////////////
    // Check if the entity is disabled
    ////////////////////////////////////////////////////////////////////////////////
    bool isEnabled() const;
    bool isDisabled() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Scales the entity either up or down to the requested size
    ////////////////////////////////////////////////////////////////////////////////
    void setSize(const sf::Vector2f& size);
    void setSize(float w, float h);

protected:

    ////////////////////////////////////////////////////////////////////////////////
    // Protected member data
    ////////////////////////////////////////////////////////////////////////////////
    sfx::Application& m_application;
    sf::Sprite        m_sprite;
    ComponentVector   m_components;
    bool              m_isEnabled;
};

} // namespace sfx

#endif