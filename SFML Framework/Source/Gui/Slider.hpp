////////////////////////////////////////////////////////////////////////////////
// Filename: Slider.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SLIDER_HPP
#define SLIDER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "GuiObject.hpp"
#include "../Containers/Vector.hpp"
#include <SFML/Graphics/Sprite.hpp>
#include <string>
#include <functional>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// Represent a slider gui object
////////////////////////////////////////////////////////////////////////////////
class Slider : public GuiObject 
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create a slider
    ////////////////////////////////////////////////////////////////////////////////
    Slider(Application& application);

    ////////////////////////////////////////////////////////////////////////////////
    // Process events
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onEvent(const sf::Event& event);

    ////////////////////////////////////////////////////////////////////////////////
    // Update the gui object
    ////////////////////////////////////////////////////////////////////////////////
    virtual void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Draw the gui object
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the position, size, center and bounding box of the object
    ////////////////////////////////////////////////////////////////////////////////
    virtual const sf::Vector2f& getPosition() const;
    virtual sf::Vector2f getSize() const;
    virtual sf::Vector2f getCenter() const;
    virtual sf::FloatRect getBoundingBox() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set a new position for the gui object
    ////////////////////////////////////////////////////////////////////////////////
    virtual void setPosition(const sf::Vector2f& position);
    virtual void setPosition(float x, float y);
    virtual void setX(float x);
    virtual void setY(float y);

    ////////////////////////////////////////////////////////////////////////////////
    // Check if another gui object or bounding box intersects 
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool intersects(const GuiObject& object) const;
    virtual bool intersects(const sf::FloatRect& boundingBox) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Check if a single point is inside the gui object
    ////////////////////////////////////////////////////////////////////////////////
    virtual bool contains(const sf::Vector2f& position) const;
    virtual bool contains(float x, float y) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the texture specified by an index
    // 0 = Bar texture
    // 1 = Slider texture
    ////////////////////////////////////////////////////////////////////////////////
    const sf::Texture& getTexture(std::size_t index) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set the texture. See getTexture() for correct indices
    ////////////////////////////////////////////////////////////////////////////////
    void setTexture(std::size_t index, const std::string& filename);
    void setTexture(std::size_t index, const sf::Texture& texture);

    ////////////////////////////////////////////////////////////////////////////////
    // This method will attempt to load two images located in the filename.
    // Example: If filename is "Data/Images/Slider" 
    // This method will try and load two images named Slider.png and Bar.png
    // in a folder named Slider in the path Data/Images.
    ////////////////////////////////////////////////////////////////////////////////
    void setTexture(const std::string& filename);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the minimum, maximum and current value
    ////////////////////////////////////////////////////////////////////////////////
    float getMinimum() const;
    float getMaximum() const;
    float getValue() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set the minimum, maximum and current value
    ////////////////////////////////////////////////////////////////////////////////
    void setMinimum(float min);
    void setMaximum(float max);
    void setValue(float value);

    ////////////////////////////////////////////////////////////////////////////////
    // Add callbacks when the slider is either pressed, moved or released
    ////////////////////////////////////////////////////////////////////////////////
    void addPressedCallback(const std::function<void()>& callback);
    void addMovedCallback(const std::function<void()>& callback);
    void addReleasedCallback(const std::function<void()>& callback);

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef Vector<std::function<void()>> Callbacks;

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    sf::Sprite m_sprites[2];
    float      m_minimum;
    float      m_maximum;
    float      m_value;
    Callbacks  m_pressedCallbacks;
    Callbacks  m_movedCallbacks;
    Callbacks  m_releasedCallbacks;
};

} // namespace sfx

#endif