////////////////////////////////////////////////////////////////////////////////
// Filename: GuiManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_GUI_MANAGER_HPP
#define SFX_GUI_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "../Containers/Map.hpp"
#include "GuiObject.hpp"
#include <SFML/Graphics/Drawable.hpp>
#include <memory>
#include <list>

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace sfx { class Application;  }
namespace sfx { class Button;       }
namespace sfx { class CheckBox;     }
namespace sfx { class Label;        }
namespace sfx { class Picture;      }
namespace sfx { class RadioButton;  }
namespace sfx { class Slider;       }
namespace sfx { class TextEditBox;  }

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A gui manager that can create, load and store gui objects
////////////////////////////////////////////////////////////////////////////////
class GuiManager : public sf::Drawable
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef std::shared_ptr<GuiObject>     GuiObjectPtr;
    typedef Map<std::string, GuiObjectPtr> GuiObjectMap;
    typedef std::list<GuiObjectPtr>        GuiObjectList;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create a gui manager
    ////////////////////////////////////////////////////////////////////////////////
    GuiManager(Application& application);

    ////////////////////////////////////////////////////////////////////////////////
    // Add a gui object to the manager. If the key already exist the previous value
    // will be overwritten.
    ////////////////////////////////////////////////////////////////////////////////
    template<typename T> T& create(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Get a gui object specified by a key. If the key doesn't exist then an error
    // is thrown.
    ////////////////////////////////////////////////////////////////////////////////
    template<typename T> T& get(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Remove a gui object from the manager. Any references to the object will be
    // invalidated.
    ////////////////////////////////////////////////////////////////////////////////
    void remove(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Handle events
    ////////////////////////////////////////////////////////////////////////////////
    void onEvent(const sf::Event& event);

    ////////////////////////////////////////////////////////////////////////////////
    // Update all gui objects
    ////////////////////////////////////////////////////////////////////////////////
    void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Draw all the gui objects in the manager
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Create a button
    ////////////////////////////////////////////////////////////////////////////////
    sfx::Button& createButton(const std::string& key, const std::string& filename, const sf::Vector2f& position);
    sfx::Button& createButton(const std::string& key, const std::string& filename, float x = 0, float y = 0);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a check box
    ////////////////////////////////////////////////////////////////////////////////
    sfx::CheckBox& createCheckBox(const std::string& key, const std::string& filename, const sf::Vector2f& position);
    sfx::CheckBox& createCheckBox(const std::string& key, const std::string& filename, float x = 0, float y = 0);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a label
    ////////////////////////////////////////////////////////////////////////////////
    sfx::Label& createLabel(const std::string& key, const std::string& text, const std::string& font, const sf::Vector2f& position, unsigned int characterSize);
    sfx::Label& createLabel(const std::string& key, const std::string& text, const std::string& font, float x = 0, float y = 0, unsigned int characterSize = 20);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a picture
    ////////////////////////////////////////////////////////////////////////////////
    sfx::Picture& createPicture(const std::string& key, const std::string& filename, const sf::Vector2f& position);
    sfx::Picture& createPicture(const std::string& key, const std::string& filename, float x = 0, float y = 0);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a radio button
    ////////////////////////////////////////////////////////////////////////////////
    sfx::RadioButton& createRadioButton(const std::string& key, const std::string& filename, const std::string& group, const sf::Vector2f& position);
    sfx::RadioButton& createRadioButton(const std::string& key, const std::string& filename, const std::string& group, float x = 0, float y = 0);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a slider
    ////////////////////////////////////////////////////////////////////////////////
    sfx::Slider& createSlider(const std::string& key, const std::string& filename, const sf::Vector2f& position, float minimum, float maximum, float current);
    sfx::Slider& createSlider(const std::string& key, const std::string& filename, float x = 0, float y = 0, float minimum = 0.f, float maximum = 100.f, float current = 0.f);

    ////////////////////////////////////////////////////////////////////////////////
    // Create a text  edit box
    ////////////////////////////////////////////////////////////////////////////////
    sfx::TextEditBox& createTextEditBox(const std::string& key, const std::string& filename, const std::string& font, const sf::Vector2f& position, unsigned int characterSize);
    sfx::TextEditBox& createTextEditBox(const std::string& key, const std::string& filename, const std::string& font, float x = 0, float y = 0, unsigned int characterSize = 20);

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    Application&    m_application;
    GuiObjectMap    m_objects;
    GuiObjectList   m_objectsList;
};

} // namespace sfx

////////////////////////////////////////////////////////////////////////////////
// Inline files
////////////////////////////////////////////////////////////////////////////////
#include "GuiManager.inl"

#endif
