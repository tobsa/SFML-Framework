////////////////////////////////////////////////////////////////////////////////
// Filename: EventManager.cpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "EventManager.hpp"
#include "Utility/Log.hpp"
#include "Utility/Utility.hpp"
#include <algorithm>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
void EventManager::addEvent(const Event& event)
{
    m_events.addBack(event);
}
    
////////////////////////////////////////////////////////////////////////////////
std::size_t EventManager::getSize() const
{
    return m_events.getSize();
}

////////////////////////////////////////////////////////////////////////////////
const Event& EventManager::getEvent(const std::string& name)
{
    auto result = std::find(m_events.begin(), m_events.end(), Event(name));
    
    if(result == m_events.end())
        sfx::Log::writeT("Error (EventManager::getEvent()): " + name + " doesn't exist");

    return *result;
}

////////////////////////////////////////////////////////////////////////////////
const Event& EventManager::getEvent(std::size_t index)
{
    return m_events[sfx::clamp(index, static_cast<std::size_t>(0), m_events.getSize() - 1)];
}

////////////////////////////////////////////////////////////////////////////////
EventManager::Events& EventManager::getEvents()
{
    return m_events;
}

////////////////////////////////////////////////////////////////////////////////
void EventManager::remove(const std::string& name)
{
    m_events.removeValue(name);
}

////////////////////////////////////////////////////////////////////////////////
void EventManager::remove(std::size_t index)
{
    m_events.remove(index);
}

////////////////////////////////////////////////////////////////////////////////
void EventManager::removeLast()
{
    m_events.removeBack();
}

////////////////////////////////////////////////////////////////////////////////
bool EventManager::findEvent(const std::string& name)
{
    if(m_events.find(Event(name)) == -1)
        return false;

    return true;
}

} // namespace sfx