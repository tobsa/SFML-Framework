////////////////////////////////////////////////////////////////////////////////
// Filename: Scanner.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SCANNER_HPP
#define SCANNER_HPP

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include <string>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// Represent a scanner that can read tokens from a single string
////////////////////////////////////////////////////////////////////////////////
class Scanner
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Construct a scanner by a string
    ////////////////////////////////////////////////////////////////////////////////
    Scanner(const std::string& str);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the next token in the string and consume it
    ////////////////////////////////////////////////////////////////////////////////
    std::string getToken();

    ////////////////////////////////////////////////////////////////////////////////
    // Peek at the next token (get the token without consuming it)
    ////////////////////////////////////////////////////////////////////////////////
    std::string peekToken();

    ////////////////////////////////////////////////////////////////////////////////
    // Save a token to the scanner
    ////////////////////////////////////////////////////////////////////////////////
    void saveToken(const std::string& token);

    ////////////////////////////////////////////////////////////////////////////////
    // Check if more tokens exists in the scanner
    ////////////////////////////////////////////////////////////////////////////////
    bool hasToken() const;

private:
        
    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    std::string m_string;
};

} // namespace sfx

#endif