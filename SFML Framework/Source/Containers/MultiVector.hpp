////////////////////////////////////////////////////////////////////////////////
// Filename: MultiVector.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_MULTI_VECTOR_HPP
#define SFX_MULTI_VECTOR_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Vector.hpp"

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A multi vector object with the ability to create "pages"
////////////////////////////////////////////////////////////////////////////////
template<typename T> class MultiVector
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ////////////////////////////////////////////////////////////////////////////////
    MultiVector(std::size_t pageSize = 1);

    ////////////////////////////////////////////////////////////////////////////////
    // Add a new element to the multivector
    ////////////////////////////////////////////////////////////////////////////////
    void addBack(const T& element);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the current page or a chosen page
    ////////////////////////////////////////////////////////////////////////////////
    Vector<T>& getCurrentPage();
    const Vector<T>& getCurrentPage() const;
    Vector<T>& getPage(std::size_t index);
    const Vector<T>& getPage(std::size_t index) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set new page, page size and add/subtract a page
    ////////////////////////////////////////////////////////////////////////////////
    void setPage(std::size_t page);
    void setPageSize(std::size_t pageSize);

    ////////////////////////////////////////////////////////////////////////////////
    // Remove from the multivector
    ////////////////////////////////////////////////////////////////////////////////
    void remove(const T& element);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the current page index, page size and number of pages
    ////////////////////////////////////////////////////////////////////////////////
    std::size_t getCurrentPageIndex() const;
    std::size_t getPageSize() const;
    std::size_t getNbPages() const;

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef Vector<Vector<T>> MultiVectorList;

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    std::size_t     m_pageSize;
    std::size_t     m_internalCurrentPage;
    std::size_t     m_externalCurrentPage;
    Vector<T>       m_elements;
    MultiVectorList m_multiVector;
};

} // namespace sfx

////////////////////////////////////////////////////////////////////////////////
// Inline files
////////////////////////////////////////////////////////////////////////////////
#include "MultiVector.inl"

#endif