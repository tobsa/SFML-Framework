////////////////////////////////////////////////////////////////////////////////
// Filename: List.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_LIST_HPP
#define SFX_LIST_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include <list>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A wrapper around std::list
////////////////////////////////////////////////////////////////////////////////
template<typename T> class List
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef typename std::list<T>::iterator       iterator;
    typedef typename std::list<T>::const_iterator const_iterator;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Add an element to the back or front
    ////////////////////////////////////////////////////////////////////////////////
    void addBack(const T& element);
    void addFront(const T& element);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the size of the list
    ////////////////////////////////////////////////////////////////////////////////
    std::size_t getSize() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the front and back element element of the list
    ////////////////////////////////////////////////////////////////////////////////
    T& front();
    const T& front() const;
    T& back();
    const T& back() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get iterator from the underlying list
    ////////////////////////////////////////////////////////////////////////////////
    typename iterator begin();
    typename const_iterator begin() const;
    typename iterator end();
    typename const_iterator end() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Check if there's elements in the list
    ////////////////////////////////////////////////////////////////////////////////
    bool isEmpty() const;
    bool hasValue() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Clear all elements
    ////////////////////////////////////////////////////////////////////////////////
    void clear();

    ////////////////////////////////////////////////////////////////////////////////
    /// Remove values from the list
    ////////////////////////////////////////////////////////////////////////////////
    iterator remove(iterator it);
    iterator remove(const_iterator it);
    void remove(const T& element);
    void removeBack();
    void removeFront();

    ////////////////////////////////////////////////////////////////////////////////
    // Insert values
    ////////////////////////////////////////////////////////////////////////////////
    void insert(iterator it, const T& element);
    void insert(const_iterator it, const T& element);

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    std::list<T> m_list;
};

} // namespace sfx

////////////////////////////////////////////////////////////////////////////////
// Inline files
////////////////////////////////////////////////////////////////////////////////
#include "List.inl"

#endif