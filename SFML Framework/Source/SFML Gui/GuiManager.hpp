////////////////////////////////////////////////////////////////////////////////
// Filename: GuiManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef GUI_MANAGER_HPP
#define GUI_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "GuiObject.hpp"
#include <SFML/Graphics/Drawable.hpp>
#include <SFML/Window/Event.hpp>
#include <memory>
#include <map>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A gui manager that can create, load and store gui objects
////////////////////////////////////////////////////////////////////////////////
class GuiManager : public sf::Drawable
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef std::shared_ptr<GuiObject>           GuiObjectPtr;
    typedef std::map<std::string, GuiObjectPtr>  GuiObjectMap;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Process events
    ////////////////////////////////////////////////////////////////////////////////
    void onEvent(const sf::Event& event);

    ////////////////////////////////////////////////////////////////////////////////
    // Update all gui objects
    ////////////////////////////////////////////////////////////////////////////////
    void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Draw all the gui objects
    ////////////////////////////////////////////////////////////////////////////////
    virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Create a new gui object. If the key already exist the previous value will
    // be removed (and invalidating all references to it).
    ////////////////////////////////////////////////////////////////////////////////
    template<typename T> T& create(const std::string& key, GuiObjectPtr object);

    ////////////////////////////////////////////////////////////////////////////////
    // Get a gui object specified by a key. If the key doesn't exist an error
    // is thrown.
    ////////////////////////////////////////////////////////////////////////////////
    template<typename T> T& get(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Remove a gui object
    ////////////////////////////////////////////////////////////////////////////////
    void remove(const std::string& key);

private:   

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    GuiObjectMap m_objects;
};

} // namespace sfx

////////////////////////////////////////////////////////////////////////////////
// Inline files
////////////////////////////////////////////////////////////////////////////////
#include "GuiManager.inl"

#endif