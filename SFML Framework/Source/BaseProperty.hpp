////////////////////////////////////////////////////////////////////////////////
// Filename: BaseProperty.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef BASE_PROPERTY_HPP
#define BASE_PROPERTY_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include <string>

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A base property class
////////////////////////////////////////////////////////////////////////////////
class BaseProperty
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create a base property object
    ////////////////////////////////////////////////////////////////////////////////
    BaseProperty();
    BaseProperty(const std::string& type);

    ////////////////////////////////////////////////////////////////////////////////
    // Destroy the base property object
    ////////////////////////////////////////////////////////////////////////////////
    virtual ~BaseProperty() = 0;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the type
    ////////////////////////////////////////////////////////////////////////////////
    const std::string& getType() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Set new type
    ////////////////////////////////////////////////////////////////////////////////
    void setType(const std::string& type);

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    std::string m_type;
};

} // namespace sfx

#endif