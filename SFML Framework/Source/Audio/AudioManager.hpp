////////////////////////////////////////////////////////////////////////////////
// Filename: AudioManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef AUDIO_MANAGER_HPP
#define AUDIO_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "SoundGroup.hpp"
#include "../Containers/Map.hpp"

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace sfx { class Application; }

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A basic audio player that can play music and sounds
////////////////////////////////////////////////////////////////////////////////
class AudioManager 
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create an audio manager
    ////////////////////////////////////////////////////////////////////////////////
    AudioManager(Application& application);

    ////////////////////////////////////////////////////////////////////////////////
    // Add a sound to the manager. If the key already exist the previous value will
    // be overwritten.
    ////////////////////////////////////////////////////////////////////////////////
    void setSound(const std::string& key, const std::string& filename, std::size_t channels = 1);

    ////////////////////////////////////////////////////////////////////////////////
    // Play, pause and stop sound
    ////////////////////////////////////////////////////////////////////////////////
    void playSound(const std::string& key);
    void pauseSound(const std::string& key);
    void stopSound(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Is the sound playing, paused or stopped?
    ////////////////////////////////////////////////////////////////////////////////
    bool isSoundPlaying(const std::string& key) const;
    bool isSoundPaused(const std::string& key) const;
    bool isSoundStopped(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get and set volume
    ////////////////////////////////////////////////////////////////////////////////
    void setSoundVolume(const std::string& key, float volume);
    float getSoundVolume(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Remove a sound from the manager
    ////////////////////////////////////////////////////////////////////////////////
    void removeSound(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Create and add sound to a group
    ////////////////////////////////////////////////////////////////////////////////
    void createGroup(const std::string& group);
    void addSoundToGroup(const std::string& group, const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Play and stop a sound group
    ////////////////////////////////////////////////////////////////////////////////
    void playSoundGroup(const std::string& group);
    void stopSoundGroup(const std::string& group);

    ////////////////////////////////////////////////////////////////////////////////
    // Is a sound group playing or stopped?
    ////////////////////////////////////////////////////////////////////////////////
    bool isSoundGroupPlaying(const std::string& group) const;
    bool isSoundGroupStopped(const std::string& group) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Remove a sound from a group
    ////////////////////////////////////////////////////////////////////////////////
    void removeSoundFromGroup(const std::string& group, const std::string& key);
    void removeGroup(const std::string& group);

    ////////////////////////////////////////////////////////////////////////////////
    // Update audio manager
    ////////////////////////////////////////////////////////////////////////////////
    void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Set sound group volume and order
    ////////////////////////////////////////////////////////////////////////////////
    void setSoundGroupVolume(const std::string& group, float volume);
    void setSoundGroupOrder(const std::string& group, SoundGroup::Order order);

    ////////////////////////////////////////////////////////////////////////////////
    // Get sound group volume and order
    ////////////////////////////////////////////////////////////////////////////////
    float getSoundGroupVolume(const std::string& group) const;
    SoundGroup::Order getSoundGroupOrder(const std::string& group) const;

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef Map<std::string, Sound>      SoundMap;
    typedef Map<std::string, SoundGroup> SoundGroupMap;

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    Application&  m_application;
    SoundMap      m_sounds;
    SoundGroupMap m_soundGroups;
};

} // namespace sfx

#endif