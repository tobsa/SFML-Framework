////////////////////////////////////////////////////////////////////////////////
// Filename: AudioManager.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef AUDIO_MANAGER_HPP
#define AUDIO_MANAGER_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "SoundList.hpp"
#include "MusicList.hpp"

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
namespace sfx { class Application; }

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// A basic audio player that can play music and sounds
////////////////////////////////////////////////////////////////////////////////
class AudioManager 
{
public:

    ////////////////////////////////////////////////////////////////////////////////
    // Create an audio manager
    ////////////////////////////////////////////////////////////////////////////////
    AudioManager(Application& application);

    ////////////////////////////////////////////////////////////////////////////////
    // Add, play, pause and stop sounds
    ////////////////////////////////////////////////////////////////////////////////
    void addSound(const std::string& key, const std::string& filename, std::size_t nbChannels = 1);
    void playSound(const std::string& key);
    void pauseSound(const std::string& key);
    void stopSound(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Set volume, loop and pitch
    ////////////////////////////////////////////////////////////////////////////////
    void setSoundVolume(const std::string& key, float volume);
    void setSoundLoop(const std::string& key, bool loop);
    void setSoundPitch(const std::string& key, float pitch);

    ////////////////////////////////////////////////////////////////////////////////
    // Check if a sound is playing, is paused or stopped
    ////////////////////////////////////////////////////////////////////////////////
    bool isSoundPlaying(const std::string& key) const;
    bool isSoundPaused(const std::string& key) const;
    bool isSoundStopped(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the volume, loop and pitch of a sound
    ////////////////////////////////////////////////////////////////////////////////
    float getSoundVolume(const std::string& key) const;
    bool getSoundLoop(const std::string& key) const;
    float getSoundPitch(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Add, play, pause and stop music
    ////////////////////////////////////////////////////////////////////////////////
    void addMusic(const std::string& key, const std::string& filename);
    void playMusic(const std::string& key);
    void pauseMusic(const std::string& key);
    void stopMusic(const std::string& key);

    ////////////////////////////////////////////////////////////////////////////////
    // Set music volume, loop and pitch
    ////////////////////////////////////////////////////////////////////////////////
    void setMusicVolume(const std::string& key, float volume);
    void setMusicLoop(const std::string& key, bool loop);
    void setMusicPitch(const std::string& key, float pitch);

    ////////////////////////////////////////////////////////////////////////////////
    // Check if the music is either playing, paused or stopped
    ////////////////////////////////////////////////////////////////////////////////
    bool isMusicPlaying(const std::string& key) const;
    bool isMusicPaused(const std::string& key) const;
    bool isMusicStopped(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Get the volume, loop and pitch of a music
    ////////////////////////////////////////////////////////////////////////////////
    float getMusicVolume(const std::string& key) const;
    bool getMusicLoop(const std::string& key) const;
    float getMusicPitch(const std::string& key) const;

    ////////////////////////////////////////////////////////////////////////////////
    // Add a sound to a sound list, play, pause and stop sound list
    ////////////////////////////////////////////////////////////////////////////////
    void addSoundToList(const std::string& soundList, const std::string& filename);
    void playSoundList(const std::string& soundList);
    void pauseSoundList(const std::string& soundList);
    void stopSoundList(const std::string& soundList);
    void setSoundListOrder(const std::string& soundList, SoundList::Order order);

    ////////////////////////////////////////////////////////////////////////////////
    // Update the audio manager (needed for playlists)
    ////////////////////////////////////////////////////////////////////////////////
    void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Add music to the music list, play, pause and stop music
    ////////////////////////////////////////////////////////////////////////////////
    void addMusicToList(const std::string& musicList, const std::string& filename);
    void playMusicList(const std::string& musicList);
    void pauseMusicList(const std::string& musicList);
    void stopMusicList(const std::string& musicList);
    void setMusicListOrder(const std::string& musicList, MusicList::Order order);

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef std::vector<sf::Sound>           Sounds;
    typedef std::map<std::string, Sounds>    SoundMap;
    typedef std::shared_ptr<sf::Music>       MusicPtr;
    typedef std::map<std::string, MusicPtr>  MusicMap;
    typedef std::map<std::string, SoundList> SoundList;
    typedef std::map<std::string, MusicList> MusicList;

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    Application& m_application;
    SoundMap     m_sounds;
    MusicMap     m_musics;
    SoundList    m_soundList;
    MusicList    m_musicList;
};

} // namespace sfx

#endif