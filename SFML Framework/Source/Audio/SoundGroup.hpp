////////////////////////////////////////////////////////////////////////////////
// Filename: SoundGroup.hpp
// Author:   Tobias Savinainen
// Year:     2013
////////////////////////////////////////////////////////////////////////////////
#ifndef SFX_SOUND_GROUP_HPP
#define SFX_SOUND_GROUP_HPP

////////////////////////////////////////////////////////////////////////////////
// Header files
////////////////////////////////////////////////////////////////////////////////
#include "Sound.hpp"

namespace sfx
{

////////////////////////////////////////////////////////////////////////////////
// 
////////////////////////////////////////////////////////////////////////////////
class SoundGroup
{
private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private typedefs
    ////////////////////////////////////////////////////////////////////////////////
    typedef Vector<Sound> SoundVector;

public:

    ////////////////////////////////////////////////////////////////////////////////
    // Public enums
    ////////////////////////////////////////////////////////////////////////////////
    enum Order { Linear,        // Plays next sound
                 LinearSkip,    // Plays next sound but skips to the next if it isn't playable
                 LinearOnce,    // Plays all the sounds in the list once
                 LinearAuto,    // Automatically plays the next sound
                 Random,        // Plays a random sound in the list
                 RandomAuto     // Automaically keep choosing random sounds
    };

    ////////////////////////////////////////////////////////////////////////////////
    // Constructor
    ////////////////////////////////////////////////////////////////////////////////
    SoundGroup(Order order = LinearSkip);

    ////////////////////////////////////////////////////////////////////////////////
    // Add a new sound to the group
    ////////////////////////////////////////////////////////////////////////////////
    void addSound(const Sound& sound);

    ////////////////////////////////////////////////////////////////////////////////
    // Play and stop the sound group
    ////////////////////////////////////////////////////////////////////////////////
    void play();
    void stop();

    ////////////////////////////////////////////////////////////////////////////////
    // Check to see if the sound group is either playing or stopped
    ////////////////////////////////////////////////////////////////////////////////
    bool isPlaying() const;
    bool isStopped() const;

    ////////////////////////////////////////////////////////////////////////////////
    // Remove a sound from the group
    ////////////////////////////////////////////////////////////////////////////////
    void removeSound(const Sound& sound);
    void removeSound(const std::string& name);

    ////////////////////////////////////////////////////////////////////////////////
    // Need to update in order for LinearAuto and RandomAuto to work properly
    ////////////////////////////////////////////////////////////////////////////////
    void onUpdate();

    ////////////////////////////////////////////////////////////////////////////////
    // Set order and volume
    ////////////////////////////////////////////////////////////////////////////////
    void setOrder(Order order);
    void setVolume(float volume);

    ////////////////////////////////////////////////////////////////////////////////
    // Get the order and volume
    ////////////////////////////////////////////////////////////////////////////////
    Order getOrder() const;
    float getVolume() const;

private:

    ////////////////////////////////////////////////////////////////////////////////
    // Private member data
    ////////////////////////////////////////////////////////////////////////////////
    SoundVector m_sounds;
    Order       m_order;
    std::size_t m_currentIndex;
    std::size_t m_nextIndex;
    bool        m_playing;
    float       m_volume;
};

} // namespace sfx

#endif